{"version":3,"sources":["assets/scripts/Star.js"],"names":["cc","Class","Component","properties","pickRadius","getPlayerDistance","playerPos","game","player","getPosition","dist","node","position","sub","mag","onPicked","gainScore","spawnNewStar","destroy","update","dt","opacityRatio","timer","starDuration","minOpacity","opacity","Math","floor","start"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACRC,IAAAA,UAAU,EAAE;AADJ,GAHP;AAOL;AAEA;AACAC,EAAAA,iBAAiB,EAAE,6BAAY;AAC3B;AACA,QAAIC,SAAS,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,WAAjB,EAAhB,CAF2B,CAG3B;;AACA,QAAIC,IAAI,GAAG,KAAKC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuBP,SAAvB,EAAkCQ,GAAlC,EAAX;AACA,WAAOJ,IAAP;AACH,GAhBI;AAkBLK,EAAAA,QAAQ,EAAE,oBAAW;AACjB,SAAKR,IAAL,CAAUS,SAAV,GADiB,CAEjB;;AACA,SAAKT,IAAL,CAAUU,YAAV,GAHiB,CAIjB;;AACA,SAAKN,IAAL,CAAUO,OAAV;AACH,GAxBI;AA0BLC,EAAAA,MAAM,EAAE,gBAAUC,EAAV,EAAc;AAClB;AACA,QAAIC,YAAY,GAAG,IAAI,KAAKd,IAAL,CAAUe,KAAV,GAAkB,KAAKf,IAAL,CAAUgB,YAAnD;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,SAAKb,IAAL,CAAUc,OAAV,GAAoBD,UAAU,GAAGE,IAAI,CAACC,KAAL,CAAWN,YAAY,IAAI,MAAMG,UAAV,CAAvB,CAAjC,CAJkB,CAKlB;;AACA,QAAI,KAAKnB,iBAAL,KAA2B,KAAKD,UAApC,EAAgD;AAC5C;AACA,WAAKW,QAAL;AACA;AACH;AACJ,GArCI;AAuCLa,EAAAA,KAvCK,mBAuCI,CAER,CAzCI,CA2CL;;AA3CK,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        pickRadius: 0,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n    getPlayerDistance: function () {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    },\n\n    onPicked: function() {\n        this.game.gainScore();\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n    },\n\n    update: function (dt) {\n        // 根据 Game 脚本中的计时器更新星星的透明度\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n    },\n\n    start () {\n\n    },\n\n    // update (dt) {},\n});\n"]}