{"version":3,"sources":["assets/scripts/Game.js"],"names":["cc","Class","Component","properties","starPrefab","type","Prefab","btnplayPrefab","maxStarDuration","minStarDuration","starDuration","ground","Node","player","score","displayName","tooltip","scoreDisplay","Label","scoreAudio","AudioClip","onLoad","console","log","timer","groundY","y","height","spawnNewStar","start","update","dt","gameOver","stopAllActions","newStar","instantiate","Math","random","node","addChild","setPosition","getNewStarPosition","getComponent","game","getPlayBtnPosition","v2","randX","randY","jumpHeight","maxX","width","gainScore","string","audioEngine","playEffect"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        btnplayPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        starDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            default: null,\n            type: cc.Node\n        },\n        score: {\n            default: 0,\n            displayName: \"Score (player)\",\n            tooltip: \"The score of player\",\n        },\n\n        // score label 的引用\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        // 跳跃音效资源\n        scoreAudio: {\n            default: null,\n            type: cc.AudioClip\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n    onLoad () {\n        console.log('hook onload');\n        // 初始化计分\n        this.score = 0;\n        this.timer = 0;\n        this.groundY = this.ground.y + this.ground.height / 2;\n        this.spawnNewStar();\n    },\n\n    start () {\n        // console.log('hook start');\n        // this.showPlayBtn();\n    },\n\n    update (dt) {\n        // 就会调用游戏失败逻辑\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n\n    gameOver: function () {\n        this.player.stopAllActions(); //停止 player 节点的跳跃动作\n    },\n\n    spawnNewStar () {\n        // 使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n\n        // star存在时间\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        newStar.getComponent('Star').game = this;\n    },\n\n    getPlayBtnPosition () {\n        return cc.v2(0, 0);\n    },\n\n    getNewStarPosition () {\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width / 2;\n        randX = (Math.random() - 0.5) * 2 * maxX;\n        // 返回星星坐标\n        return cc.v2(randX, randY);\n    },\n\n    gainScore: function () {\n        this.score += 1;\n        // 更新 scoreDisplay Label 的文字\n        this.scoreDisplay.string = 'Score: ' + this.score;\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n});\n"]}